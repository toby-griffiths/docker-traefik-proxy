version: '3'

networks:
  traefik:
    external: true

volumes:
  certs: ~

services:
  traefik:
    build:
      context: "."
      args:
        TRAEFIK_VERSION: '${TRAEFIK_VERSION:?}'
      platforms:
        - 'linux/amd64'
        - 'linux/arm/v6'
        - 'linux/arm64/v8'
        - 'linux/s390x'
    image: 'tobygr/traefik-proxy:${TRAEFIK_VERSION:?}'
    restart: always
    environment:
      FQDN: '${FQDN}'
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - traefik
    volumes:
      - certs:/opt/traefik/certs
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      service: traefik-proxy
      function: reverse-proxy
      traefik.enable: true
      traefik.http.routers.traefik.rule: Host(`traefik.dev.localhost`)
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.entrypoints: https
      traefik.http.services.traefik.loadbalancer.server.port: 8080

  whoami:
    image: traefik/whoami
    networks:
      - traefik
    labels:
      service: traefik-proxy
      function: test-container
      traefik.enable: true
      traefik.http.routers.traefik-whoami.rule: Host(`whoami.${FQDN}`)
      traefik.http.routers.traefik-whoami.tls: true
      traefik.http.routers.traefik-whoami.entrypoints: https
      traefik.http.services.traefik-whoami.loadbalancer.server.port: 80
